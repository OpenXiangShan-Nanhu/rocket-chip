// See LICENSE.SiFive for license details.
// See LICENSE.Berkeley for license details.

package freechips.rocketchip.rocket

import chisel3.util._

object CustomInstructions {
  def MNRET              = BitPat("b01110000001000000000000001110011")
  def CEASE              = BitPat("b00110000010100000000000001110011")
  def CFLUSH_D_L1        = BitPat("b111111000000?????000000001110011")
  def CDISCARD_D_L1      = BitPat("b111111000010?????000000001110011")
  def CUSTOM0            = BitPat("b?????????????????000?????0001011")
  def CUSTOM0_RS1        = BitPat("b?????????????????010?????0001011")
  def CUSTOM0_RS1_RS2    = BitPat("b?????????????????011?????0001011")
  def CUSTOM0_RD         = BitPat("b?????????????????100?????0001011")
  def CUSTOM0_RD_RS1     = BitPat("b?????????????????110?????0001011")
  def CUSTOM0_RD_RS1_RS2 = BitPat("b?????????????????111?????0001011")
  def CUSTOM1            = BitPat("b?????????????????000?????0101011")
  def CUSTOM1_RS1        = BitPat("b?????????????????010?????0101011")
  def CUSTOM1_RS1_RS2    = BitPat("b?????????????????011?????0101011")
  def CUSTOM1_RD         = BitPat("b?????????????????100?????0101011")
  def CUSTOM1_RD_RS1     = BitPat("b?????????????????110?????0101011")
  def CUSTOM1_RD_RS1_RS2 = BitPat("b?????????????????111?????0101011")
  def CUSTOM2            = BitPat("b?????????????????000?????1011011")
  def CUSTOM2_RS1        = BitPat("b?????????????????010?????1011011")
  def CUSTOM2_RS1_RS2    = BitPat("b?????????????????011?????1011011")
  def CUSTOM2_RD         = BitPat("b?????????????????100?????1011011")
  def CUSTOM2_RD_RS1     = BitPat("b?????????????????110?????1011011")
  def CUSTOM2_RD_RS1_RS2 = BitPat("b?????????????????111?????1011011")
  def CUSTOM3            = BitPat("b?????????????????000?????1111011")
  def CUSTOM3_RS1        = BitPat("b?????????????????010?????1111011")
  def CUSTOM3_RS1_RS2    = BitPat("b?????????????????011?????1111011")
  def CUSTOM3_RD         = BitPat("b?????????????????100?????1111011")
  def CUSTOM3_RD_RS1     = BitPat("b?????????????????110?????1111011")
  def CUSTOM3_RD_RS1_RS2 = BitPat("b?????????????????111?????1111011")
}

object VectorInstructions {
  // TODO: FP
  def VECTOR_IVV            = BitPat("b?????????????????000?????1010111")
  // MVV
  def VECTOR_MVV            = BitPat("b?????????????????010?????1010111")
  // sub BitPat
  // since VWXUNARY0 overlaps with VECTOR_MVV, we have to specify other case
  def VECTOR_MVV_VWXUNARY0  = BitPat("b010000???????????010?????1010111")
  def VECTOR_MVV_VXUNARY0   = BitPat("b010010???????????010?????1010111")
  def VECTOR_MVV_VMUNARY0   = BitPat("b010100???????????010?????1010111")
  def VECTOR_MVV_VCOMPRESS  = BitPat("b010111???????????010?????1010111")
  def VECTOR_MVV_OTHER0     = BitPat("b011??????????????010?????1010111")
  def VECTOR_MVV_OTHER1     = BitPat("b00???????????????010?????1010111")
  def VECTOR_MVV_OTHER2     = BitPat("b1????????????????010?????1010111")
  def VECTOR_IVI            = BitPat("b?????????????????011?????1010111")
  def VECTOR_IVX            = BitPat("b?????????????????100?????1010111")
  def VECTOR_MVX            = BitPat("b?????????????????110?????1010111")
  def VECTOR_SET_RD_RS1     = BitPat("b0????????????????111?????1010111")
  def VECTOR_SET_RD         = BitPat("b11???????????????111?????1010111")
  def VECTOR_SET_RD_RS1_RS2 = BitPat("b10???????????????111?????1010111")

  def VECTOR_VL             = BitPat("b????00???????????????????0000111")
  def VECTOR_VLS            = BitPat("b????10???????????????????0000111")
  def VECTOR_VLX            = BitPat("b?????1???????????????????0000111")

  def VECTOR_VS             = BitPat("b????00???????????????????0100111")
  def VECTOR_VSS            = BitPat("b????10???????????????????0100111")
  def VECTOR_VSX            = BitPat("b?????1???????????????????0100111")
}

object CustomCSRs {
  val mnscratch = 0x350
  val mnepc = 0x351
  val mncause = 0x352
  val mnstatus = 0x353
  val all = {
    val res = collection.mutable.ArrayBuffer[Int]()
    res += mnscratch
    res += mnepc
    res += mncause
    res += mnstatus
    res.toArray
  }
  val all32 = {
    val res = collection.mutable.ArrayBuffer(all:_*)
    res.toArray
  }
}
